ЗАПУСК АНАЛИЗА ПРОИЗВОДИТЕЛЬНОСТИ С КРАТНЫМ УВЕЛИЧЕНИЕМ ДЛИНЫ
============================================================

Тестирование для длины: 8 символов...
Завершено для длины 8 символов
Пример строк: "UCmdGIXz..." vs "YsRblCFA..."
------------------------------------------------------------

Тестирование для длины: 16 символов...
Завершено для длины 16 символов
Пример строк: "IITzz uoZSexxIGU..." vs "EcKzRRLbNKAazr x..."
------------------------------------------------------------

Тестирование для длины: 32 символов...
Завершено для длины 32 символов
Пример строк: "uEIyzlEqZIjq MCpYcfA..." vs "jiwioSmB nSTavI fRPs..."
------------------------------------------------------------

Тестирование для длины: 64 символов...
Завершено для длины 64 символов
Пример строк: "sWLBVfsIncGZNVipnxct..." vs "WJldPnDUxMqREjGLyEVw..."
------------------------------------------------------------

Тестирование для длины: 128 символов...
Завершено для длины 128 символов
Пример строк: "qvonuDNGGysycYcndBFh..." vs "EGWWVSwzkiNjs CNCmhf..."
------------------------------------------------------------

Тестирование для длины: 256 символов...
Завершено для длины 256 символов
Пример строк: "oJZcgSYafgBUxjmKnYJJ..." vs "EAGIxJWjvVtAExSHuTXn..."
------------------------------------------------------------

Тестирование для длины: 512 символов...
Завершено для длины 512 символов
Пример строк: "rfUwfXFB bePkyLOQYhW..." vs "zsgisGMLsVeqaMCWRrgI..."
------------------------------------------------------------

Тестирование для длины: 1024 символов...
Завершено для длины 1024 символов
Пример строк: "YUEzvTqWjzHssWAlezSJ..." vs "snUObLZfpKSEHBlOzxMC..."
------------------------------------------------------------

РЕЗУЛЬТАТЫ АНАЛИЗА ПРОИЗВОДИТЕЛЬНОСТИ
=====================================

Зависимость времени выполнения (мс) от длины строк:

Длина |  Lev  | D-Lev |  Ham  | Jac2  | Jac3  | Cos2  | Cos3  | Qgr2  | Qgr3  |  Jaro | J-Wink|  LCS
--------------------------------------------------------------------------------------------------------------
    8 |  0.04 |  0.05 |  0.05 |  0.06 |  0.06 |  0.05 |  0.06 |  0.05 |  0.06 |  0.05 |  0.06 |  0.05
   16 |  0.05 |  0.05 |  0.05 |  0.06 |  0.06 |  0.06 |  0.07 |  0.11 |  0.06 |  0.05 |  0.05 |  0.05
   32 |  0.06 |  0.05 |  0.04 |  0.05 |  0.06 |  0.06 |  0.05 |  0.06 |  0.06 |  0.05 |  0.05 |  0.05
   64 |  0.06 |  0.08 |  0.05 |  0.06 |  0.06 |  0.07 |  0.07 |  0.06 |  0.07 |  0.05 |  0.06 |  0.06
  128 |  0.13 |  0.28 |  0.05 |  0.08 |  0.09 |  0.08 |  0.09 |  0.09 |  0.08 |  0.05 |  0.06 |  0.10
  256 |  0.35 |  1.20 |  0.05 |  0.14 |  0.13 |  0.14 |  0.14 |  0.13 |  0.14 |  0.07 |  0.07 |  0.25
  512 |  1.29 |  4.86 |  0.05 |  0.20 |  0.24 |  0.22 |  0.23 |  0.22 |  0.23 |  0.11 |  0.11 |  0.89
 1024 |  8.84 | 23.49 |  0.05 |  0.38 |  0.44 |  0.38 |  0.45 |  0.38 |  0.46 |  0.27 |  0.28 |  7.35

АНАЛИЗ РОСТА ВРЕМЕНИ ВЫПОЛНЕНИЯ
==============================

Анализ роста времени выполнения (8 vs 1024 символов):

levenshtein    :   0.04 мс ->   8.84 мс (рост в 197.1 раз, сложность ~O(n^2.03))
damerau_levenshtein:   0.05 мс ->  23.49 мс (рост в 481.3 раз, сложность ~O(n^2.12))
hamming        :   0.05 мс ->   0.05 мс (рост в   1.0 раз, сложность ~O(n^-0.02))
jaccard_q2     :   0.06 мс ->   0.38 мс (рост в   6.1 раз, сложность ~O(n^0.73))
jaccard_q3     :   0.06 мс ->   0.44 мс (рост в   7.7 раз, сложность ~O(n^0.76))
cosine_q2      :   0.05 мс ->   0.38 мс (рост в   7.0 раз, сложность ~O(n^0.74))
cosine_q3      :   0.06 мс ->   0.45 мс (рост в   7.7 раз, сложность ~O(n^0.75))
qgram_q2       :   0.05 мс ->   0.38 мс (рост в   7.0 раз, сложность ~O(n^0.70))
qgram_q3       :   0.06 мс ->   0.46 мс (рост в   8.0 раз, сложность ~O(n^0.84))
jaro           :   0.05 мс ->   0.27 мс (рост в   6.0 раз, сложность ~O(n^0.79))
jaro_winkler   :   0.06 мс ->   0.28 мс (рост в   5.0 раз, сложность ~O(n^0.74))
lcs            :   0.05 мс ->   7.35 мс (рост в 156.9 раз, сложность ~O(n^2.04))

ГРУППИРОВКА МЕТРИК ПО ВЫЧИСЛИТЕЛЬНОЙ СЛОЖНОСТИ
=============================================

ЛИНЕЙНАЯ СЛОЖНОСТЬ O(n):
  hamming        : O(n^-0.02)
  jaccard_q2     : O(n^0.73)
  jaccard_q3     : O(n^0.76)
  cosine_q2      : O(n^0.74)
  cosine_q3      : O(n^0.75)
  qgram_q2       : O(n^0.70)
  qgram_q3       : O(n^0.84)
  jaro           : O(n^0.79)
  jaro_winkler   : O(n^0.74)

КВАДРАТИЧНАЯ СЛОЖНОСТЬ O(n²):
  levenshtein    : O(n^2.03)
  damerau_levenshtein: O(n^2.12)
  lcs            : O(n^2.04)

ПРАКТИЧЕСКИЕ РЕКОМЕНДАЦИИ ДЛЯ РАЗНЫХ ДЛИН СТРОК
===============================================

КОРОТКИЕ СТРОКИ (< 50 символов):
  - Можно использовать любые метрики
  - Damerau-Levenshtein для точного учета транспозиций
  - Levenshtein для баланса точности и скорости

СРЕДНИЕ СТРОКИ (50-200 символов):
  - N-граммные метрики (Jaccard, Cosine, Q-gram)
  - Jaro и Jaro-Winkler
  - Избегать Damerau-Levenshtein для частых вычислений

ДЛИННЫЕ СТРОКИ (200-1000 символов):
  - Только n-граммные метрики и Jaro
  - Q-gram с маленьким q (2-3)
  - Избегать метрик редактирования (Levenshtein, Damerau-Levenshtein)

ОЧЕНЬ ДЛИННЫЕ СТРОКИ (> 1000 символов):
  - Только Jaccard и Cosine с маленьким q
  - Рассмотреть предобработку и сегментацию текста
  - Метрики редактирования не практичны

СВОДНАЯ ТАБЛИЦА РЕКОМЕНДАЦИЙ:

Метрика           | Короткие | Средние | Длинные | Очень длинные
------------------|----------|---------|---------|-------------
Levenshtein       |    ✓     |    △    |    ✗    |      ✗
Damerau-Lev       |    ✓     |    △    |    ✗    |      ✗
Jaccard (q=2)     |    ✓     |    ✓    |    ✓    |      ✓
Cosine (q=2)      |    ✓     |    ✓    |    ✓    |      ✓
Q-gram (q=2)      |    ✓     |    ✓    |    ✓    |      ✓
Jaro              |    ✓     |    ✓    |    ✓    |      △
Jaro-Winkler      |    ✓     |    ✓    |    ✓    |      △
LCS               |    ✓     |    △    |    ✗    |      ✗

✓ - рекомендуется, △ - с осторожностью, ✗ - не рекомендуется

Анализ завершен! Произведено тестирование для длин: 128, 256, 512, 1024 символов